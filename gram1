//la asignación no es una expresión en este caso
//un programa es PROG , una o varias sentencias y un final de fichero
//<PROG>, <SENT>, <EOF>
//las sentencias son expresiones con final de línea o asignaciones con final de línea
//<EXPR>, <ASIG>
//las expresiones pueden tener más expresiones dentro
//las asignaciones no son expresiones ya que las expresiones devuelven valor
//los ID pueden ser alfanuméricos seguidos de números y luego más alfanuméricos y números...etc
//<ID>

<PROG> ::= <SENT> <PROG> |
           <SENT> <EOF> |
           <EOF>

//Esta regla NO permite que una sentencia NO termine en un final de línea

<SENT> ::= <EXPR> <EOL>|
           <ASIG> <EOL>|
           <EOL>

<EXPR> ::= <EXPR> 'then' <EXPR> |
           <EXPR> '|' <EXPR> |
           <EXPR> '&' <EXPR> |
           '(' <EXPR> ')' |
           'not' <EXPR>|
           <ID> |
           boolVal

<ASIG> ::= <ID> ':' <EXPR>

//La anterior gramática es ambigua, así hay que arreglarla
//Se arregla el NOT:

<PROG> ::= <SENT> <PROG> |
           <SENT> <EOF> |
           <EOF>

<SENT> ::= <EXPR> <EOL>|
           <ASIG> <EOL>|
           <EOL>

<EXPR> ::=  <EXPR> 'then' <EXPR> |
            <EXPR> '|' <EXPR> |
            <EXPR> '&' <EXPR> |
            not <ATOM>
            <ATOM>

<ATOM> ::= not <ID> |
           not boolVal |
           <ID> |
           boolVal |
           '(' <EXPR> ')'

<ASIG> ::= <ID> ':' <EXPR>

//Se arregla el THEN y la gramática queda como:

<PROG> ::= <SENT> <PROG> |
           <SENT> <EOF> |
           <EOF>

<SENT> ::= <EXPR> <EOL>|
           <ASIG> <EOL>|
           <EOL>

<EXPR> ::=  <IMPL> '|' <EXPR> |
            <IMPL> '&' <EXPR> |
            <IMPL> |
            not <IMPL> |
            <IMPL>
            //not <ATOM>
            //<ATOM>

<IMPL> :: = <ATOM> 'then' <IMPL> |
            <ATOM>

<ATOM> ::= not <ID> |
           not boolVal |
           <ID> |
           boolVal |
           '(' <EXPR> ')'

<ASIG> ::= <ID> ':' <EXPR>

//En este momento, la gramática ya especifica la precedencia de operadores y no es recursiva por la izquierda.
//No hay backtracking posible, así que la gramática ya es LL(1)
