//gramática para FX simplificado
//no hay operadores, expresiones , etc..
//solo hay declaraciones y controles

//Símbolo inicial: <PROG>
//Un programa son una o varias funciones
//En esta gramática en particular voy a permitir que haya un programa vacío y sin main

<PROG> ::= <FUNC> <PROG> |
           <FUNC> <EOF> |
           <EOF>

//Una función es su declaración y su contenido

<FUNC> ::= <FDEC> '{' <BODY> '}'

//La declaración de una función es o func main() o bien func id ( argumentos )

<FDEC> ::= 'func' '_' 'main' '(' ')' |
         'func' '_' <ID> '(' <FARGS> ')'

//Los argumentos son <tipo de datos> <espacio> identificador
//puede haber solo un argumento o varios, separado por ','
//puede no haber argumento

<FARGS> ::= <DATATYPE> '_' <ID>  ',' <FARGS> |
            <DATATYPE> '_' <ID> |
            <EMPTY>


//El tipo de dato es un literal de string que puede ser circle, rect o int


<DATATYPE> ::= 'circle' |
               'rect' |
               'int'


//El body pueden ser más funciones, declaraciones, bucle

<BODY> ::= <FUNC> |
           <DEC> |
           <ITER>

//<Atom tiene que ser en realidad una expresión>

<DEC> ::= <ID> '(' <ATOM>, <ATOM>, <ATOM>, <ATOM> ')'

<ATOM> ::= <ID> |
           intval

<ITER> ::= 'iter' '(' <ID> ':=' <ATOM> ';' <ATOM> ',' <ATOM> ')' '{' <BODY> '}'
