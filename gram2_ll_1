////////////////////////////////////////////////////////////////////////
//Primero, arreglar el problema de los 2 FUNC a la izquierda, factorizar

<PROG> ::= <FUNC> <PROG> |
           <FUNC> <EOF> |
           <EOF>

// Se arregla así

<PROG> ::= <FUNC> <END> |
           <EOF>

<END> ::= <PROG> |
          <EOF>

////////////////////////////////////////////////////////////////////////

//siguiente, arreglar esto

<FSIG> ::= 'func' id '(' <FDECARGS> ')' |
           'func' id '(' ')'

//Se arregla así

<FSIG> :: = 'func' id '(' <FINSIDE>

<FINSIDE> :: = <FDECARGS> ')' |
               ')'

////////////////////////////////////////////////////////////////////////

//Siguiente, arreglar esto

<FDECARGS> ::= id id  ',' <FDECARGS> |
               id id

//Se arregla así

<FDECARGS> ::= ',' id id <FDECARGS> |
               id id <FDECARGS> |
               <EMPTY>

///////////////////////////////////////////////////////////////////////

//Siguiente, arreglar esto

<BODY> ::= <STMNT> <BODY> |
           <STMNT>

//Se arregla así

<BODY> ::= <STMNT> <STMNTEND>

<STMNTEND> ::= <BODY> |
               <EMPTY>


///////////////////////////////////////////////////////////////////////

//Siguiente, arreglar esto

<FUNCALL> ::= id '(' <FARGS> ')' ";" |
              id '(' ')' ";"

//Se arregla así

<FUNCALL> ::= id '(' <RFUNCALL>

<RFUNCALL> := <FARGS> ')' ';' | '(' ')' ';'

//Y luego así

<STMNT> ::= id <FUNCALL> | <ITER>

<FUNCALL> ::= '(' <RFUNCALL>

<ITER> ::= 'iter' '(' <id> ':=' <EXPR> ';' <EXPR> ',' <EXPR> ')' '{' <BODY> '}'


///////////////////////////////////////////////////////////////////////

//Siguiente, arreglar esto

<FARGS> ::= <EXPR> ',' <FARGS> |
            <EXPR>

//Se arregla así

<FARGS> ::= <EXPR> <EXPREND>

<EXPREND> ::= ',' |
          <EMPTY>


///////////////////////////////////////////////////////////////////////

//La gramática quedaría así

<PROG> ::= <FUNC> <END> |
           <EOF>

<END> ::= <PROG> |
          <EOF>

<FUNC> ::= <FSIG> '{' <BODY> '}'

<FSIG> :: = 'func' id '(' <FINSIDE>

<FINSIDE> :: = <FDECARGS> ')' |
               ')'

<FDECARGS> ::= ',' id id <FDECARGS> |
               id id <FDECARGS> |
               <EMPTY>

<BODY> ::= <STMNT> <STMNTEND>

<STMNTEND> ::= <BODY> |
               <EMPTY>

<STMNT> ::= id <FUNCALL> |
            <ITER>

<FUNCALL> ::= '(' <RFUNCALL>

<RFUNCALL> := <FARGS> ')' ';' | '(' ')' ';'

<FARGS> ::= <EXPR> <EXPREND>

<EXPREND> ::= ',' |
              <EMPTY>

<EXPR> :: = <ATOM>

<ATOM> ::= id |
           intval |
           boolVal

<ITER> ::= 'iter' '(' <id> ':=' <EXPR> ';' <EXPR> ',' <EXPR> ')' '{' <BODY> '}'

///////////////////////////////////////////////////////////////////////
